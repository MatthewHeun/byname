% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Binary.R
\name{logarithmicmean_byname}
\alias{logarithmicmean_byname}
\title{Name- and element-wise logarithmic mean of matrices.}
\usage{
logarithmicmean_byname(X1, X2, base = exp(1))
}
\arguments{
\item{X1}{first operand (a matrix or constant value or lists of same).}

\item{X2}{second operand (a matrix or constant value or lists of same).}

\item{base}{the base of the logarithm used when computing the logarithmic mean.
(Default is \code{base = exp(1)}.)}
}
\value{
A matrix representing the name-wise logarithmic mean 
        of \strong{\code{X1}} and \strong{\code{X2}}.
}
\description{
The logarithmic mean of corresponding entries of \strong{\code{X1}} and \strong{\code{X2}} is 
\code{0} if \code{x1 = 0} or \code{x2 = 0}, 
\code{x1} if \code{x1 = x2}, or
\code{(x2 - x1) / (log(x2) - log(x1))} otherwise.
}
\details{
This function performs a union and sorting of row and column names 
prior to performing logarithmic mean.
Zeroes are inserted for missing matrix elements.

Internally, the third condition is implemented as 
\code{(y - x) / log(y/x)}.

Note that \code{(x2 - x1) / log(x2/x1) = (x1 - x2) / log(x1/x2)},
so logarithmic mean is commutative;
the order of arguments \strong{\code{X1}} and \strong{\code{X2}}
does not change the result.
}
\examples{
library(magrittr)
library(dplyr)
m1 <- matrix(c(1:6), nrow = 3, ncol = 2) \%>\% 
  setrownames_byname(c("r1", "r2", "r3")) \%>\% setcolnames_byname(c("c1", "c2")) \%>\% 
  setrowtype("row") \%>\% setcoltype("col")
m2 <- matrix(c(7:12), nrow = 3, ncol = 2) \%>\% 
  setrownames_byname(c("r2", "r3", "r4")) \%>\% setcolnames_byname(c("c2", "c3")) \%>\% 
  setrowtype("row") \%>\% setcoltype("col")
logarithmicmean_byname(m1, m2)
# This also works with lists
logarithmicmean_byname(list(m1, m1), list(m2, m2))
DF <- data.frame(m1 = I(list()), m2 = I(list()))
DF[[1,"m1"]] <- m1
DF[[2,"m1"]] <- m1
DF[[1,"m2"]] <- m2
DF[[2,"m2"]] <- m2
logarithmicmean_byname(DF$m1, DF$m2)
DF \%>\% mutate(logmeans = logarithmicmean_byname(m1, m2))
}
