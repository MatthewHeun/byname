% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Byname.R
\name{select_cols_byname}
\alias{select_cols_byname}
\title{Select columns of a matrix (or list of matrices) by name}
\usage{
select_cols_byname(m, retain_pattern = "$^", remove_pattern = "$^")
}
\arguments{
\item{m}{a matrix or a list of matrices}

\item{retain_pattern}{an extended regex or list of extended regexes that specifies which columns of \code{m} to retain.
Default pattern (\code{$^}) retains nothing.}

\item{remove_pattern}{an extended regex or list of extended regexes that specifies which columns of \code{m} to remove
Default pattern (\code{$^}) removes nothing.}
}
\value{
a matrix that is a subset of \code{m} with columns selected by \code{retain_pattern} and \code{remove_pattern}.
}
\description{
Arguments indicate which columns are to be retained and which are to be removed.
For maximum flexibility, arguments are extended regex patterns
that are matched against column names.
}
\details{
Patterns are compared against column names using extended regex.
If no column names of \code{m} match the \code{retain_pattern}, \code{NULL} is returned.
If no column names of \code{m} match the \code{remove_pattern}, \code{m} is returned.

Retaining columns takes precedence over removing columns, always.

Some typical patterns are:
\itemize{
  \item{\code{^Electricity$|^Oil$}: column names that are EXACTLY \code{Electricity} or \code{Oil}.}
  \item{\code{^Electricity|^Oil}: column names that START WITH \code{Electricity} or \code{Oil}.}
  \item{\code{Electricity|Oil}: column names that CONTAIN \code{Electricity} or \code{Oil} anywhere within them.}
}

Given a list of column names, a pattern can be constructed easily using the \code{make_pattern} function.
}
\examples{
m <- matrix(1:16, ncol = 4, dimnames=list(c(paste0("i", 1:4)), paste0("p", 1:4))) \%>\%
  setrowtype("Industries") \%>\% setcoltype("Commodities")
select_cols_byname(m, retain_pattern = make_pattern(c("p1", "p4"), pattern_type = "exact"))
select_cols_byname(m, remove_pattern = make_pattern(c("p1", "p3"), pattern_type = "exact"))
# Also works for lists and data frames
select_cols_byname(list(m,m), retain_pattern = "^p1$|^p4$")
}
