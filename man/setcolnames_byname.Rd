% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Byname.R
\name{setcolnames_byname}
\alias{setcolnames_byname}
\title{Sets column names}
\usage{
setcolnames_byname(m, colnames)
}
\arguments{
\item{m}{The matrix or data frame on which column names are to be set}

\item{colnames}{The new column names. If \code{NULL} or \code{NA}, names are reset to default: "[,j]".}
}
\value{
a copy of \code{m} with new column names
}
\description{
Sets column names in a way that is amenable to use in chaining operations in a functional programming way
}
\examples{
m <- matrix(c(1:6), nrow = 2, dimnames = list(paste0("i", 1:2), paste0("c", 1:3))) \%>\% 
  setrowtype("Industries") \%>\% setcoltype("Commodity")
setcolnames_byname(m, c("a", "b", "c"))
setcolnames_byname(m, NULL) # Returns to default columns names "[,j]"
setcolnames_byname(m, NA) # Returns to default columns names "[,j]"
# This also works for lists
setcolnames_byname(list(m,m), list(c("a", "b", "c"), c("d", "e", "f")))
DF <- data.frame(m = I(list()))
DF[[1,"m"]] <- m
DF[[2,"m"]] <- m
setcolnames_byname(DF$m, list(c("cnew1", "cnew2", "cnew3")))
setcolnames_byname(DF$m, list(c("a", "b", "c"), c("d", "e", "f")))
DF <- DF \%>\% mutate(m = setcolnames_byname(m, list(c("cnew1", "cnew2", "cnew3"))))
DF$m[[1]]
DF$m[[2]]
}
