% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CompletingMatrices.R
\name{complete_rows_cols}
\alias{complete_rows_cols}
\title{Complete rows and columns in one matrix relative to another}
\usage{
complete_rows_cols(x, matrix = NA, names = dimnames(matrix), fill = 0,
  margin = c(1, 2))
}
\arguments{
\item{x}{A matrix or data frame to be completed}

\item{matrix}{Instead of supplying \code{names} directly, a \code{matrix} can be supplied
from which \code{dimnames} will be extracted. If \code{matrix} is \code{NULL} (the default), 
\code{x} will be completed relative to itself.}

\item{names}{The names of rows and columns to be completed in \code{x}, with 
the same structure as the value of \code{dimnames(matrix)}.}

\item{fill}{Rows and columns added to \code{x} will contain \code{fill}}

\item{margin}{Specifies the subscript(s) in \code{x} over which completion will occur. 
\code{margin} has nearly the same semantic meaning as in \code{\link[base]{apply}}
For rows only, give \code{1}; 
for columns only, give \code{2};
for both rows and columns, give \code{c(1,2)}, the default value.}
}
\value{
A modified version of \code{x} possibly containing additional rows and columns 
whose names are obtained from \code{matrix}
}
\description{
"Complete"-ing rows and columns means that the matrix contains a union of rows and columns
with missing data represented by the value for \code{fill} (0, by default).
Note that \code{complete_rows_cols(mat1, mat2)} and \code{complete_rows_cols(mat2, mat1)} are 
not guaranteed to have the same order for rows and columns.
(Nor are the values in the matrix guaranteed to have the same positions, of course.)
This function assumes that both \code{x} and \code{matrix} have named rows and columns.  
If both \code{matrix} and \code{names} are missing,
\code{x} will be completed relative to itself. 
I.e., \code{x} will be made square, and will contain the union of row and column names from \code{x} itself.
}
\examples{
m1 <- matrix(c(1:6), nrow=3, dimnames = list(c("r1", "r2", "r3"), c("c1", "c2")))
m2 <- matrix(c(7:12), ncol=3, dimnames = list(c("r2", "r3"), c("c2", "c3", "c4")))
complete_rows_cols(m1, m2) # Adds empty column c4
complete_rows_cols(m1, t(m2)) # Creates r2, r3 columns; c2, c3, c4 rows
complete_rows_cols(m1, m2, margin = 1) # No changes because r2 and r3 already present in m1
complete_rows_cols(m1, m2, margin = 2) # Adds empty columns c3 and c4
complete_rows_cols(m1, t(m2), margin = 1) # Adds empty rows c2, c3, c4
complete_rows_cols(m1, m2, fill = 100) # Adds columns c3 and c4 with 100's
complete_rows_cols(data.frame(m1), data.frame(m2)) # Also works with data frames
complete_rows_cols(m1, m1) # Nothing added, because everything already present
complete_rows_cols(m1, t(m1)) # Adds empty c1, c2 rows; Adds empty r1, r2, r3 columns
complete_rows_cols(m1) # Same as previous. With missing matrix, complete relative to transpose of x.
complete_rows_cols(m1, names = list(c("r10", "r11"), c("c10", "c11"))) # Adds rows r10, r11; cols c10, c11
# Also works with lists
complete_rows_cols(x = list(m1,m1))
complete_rows_cols(x = list(m1,m1), matrix = list(m2,m2))
complete_rows_cols(x = list(m1,m1), matrix = list(m2,m2), margin = 1) # No changes because r2, r3 already present in m1
complete_rows_cols(x = list(m1,m1), matrix = list(m2,m2), margin = 2)
complete_rows_cols(x = list(m1,m1), names = make_list(list(c("r10", "r11"), c("c10", "c11")), n = 2, lenx = 1))
}
