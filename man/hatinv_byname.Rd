% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Unary.R
\name{hatinv_byname}
\alias{hatinv_byname}
\title{Hatize and invert a vector}
\usage{
hatinv_byname(v, inf_to_zero = FALSE)
}
\arguments{
\item{v}{the vector to be hatized and inverted}

\item{inf_to_zero}{a logical to indicate how to handle \code{Inf} values produced by the inversion process.
If \code{FALSE} (the default), \code{Inf} is not handled differently.
If \code{TRUE}, \code{Inf} values in the resulting matrix are converted to zeroes.}
}
\value{
a square diagonal matrix with inverted elements of \code{v} on the diagonal
}
\description{
When dividing rows or columns of a matrix by elements of a vector,
the vector elements are inverted, placed on the diagonal of a new matrix, and
pre- or post-multiplied into the matrix.
This function performs the hatizing and inverting of vector \code{v} in one step
and takes advantage of computational efficiencies to achieve the desired result.
The computational shortcut is apparent when one observes that the matrix produced by hatizing and inverting
a vector is a diagonal matrix whose non-zero elements are the numerical inverses of the individual elements of \code{v}.
So this function first inverts each member of \code{v} then places those members on the diagonal of a matrix.
}
\details{
Note that this function gives the same result as \code{invert_byname(hatize_byname(v))},
except that \code{invert_byname(hatize_byname(v))} fails due to singular matrix
when any of the elements of \code{v} are zero.
This function will give \code{Inf} on the diagonal of the result for each zero element of \code{v},
arguably a better answer.

Note further that a zero value in \code{v} could indicate a missing value.
Thus, for the purposes of multiplying into a later matrix, the \code{hatinv} matrix
it may be better that the result has zeroes where \code{v} had zeroes. 
Set argument \code{inf_to_zero = TRUE} to achieve the desired effect.
}
\examples{
v <- matrix(1:10, ncol = 1, dimnames = list(c(paste0("i", 1:10)), c("c1"))) \%>\%
  setrowtype("Industries") \%>\% setcoltype(NA)
r <- matrix(1:5, nrow = 1, dimnames = list(c("r1"), c(paste0("c", 1:5)))) \%>\%
  setrowtype(NA) \%>\% setcoltype("Commodities")
hatinv_byname(v)
hatinv_byname(r)
# This also works with lists.
hatinv_byname(list(v, v))
# Provides better handling of 0 values.
v2 <- matrix(0:1, ncol = 1, dimnames = list(c(paste0("i", 0:1)), c("p1"))) \%>\%
  setrowtype("Industries") \%>\% setcoltype(NA)
hatinv_byname(v2)
\dontrun{v2 \%>\% hatize_byname() \%>\% invert_byname # Produces singular matrix error}
hatinv_byname(v2, inf_to_zero = TRUE)
}
