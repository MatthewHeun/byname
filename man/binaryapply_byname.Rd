% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Byname.R
\name{binaryapply_byname}
\alias{binaryapply_byname}
\title{Apply a binary function byname}
\usage{
binaryapply_byname(FUN, a, b, ..., match_type = c("all", "matmult", "none"),
  rowcoltypes = TRUE, .organize = TRUE)
}
\arguments{
\item{FUN}{a binary function to be applied "byname" to \code{a} and \code{b}.}

\item{a}{the first argument to \code{FUN}.}

\item{b}{the second argument to \code{FUN}.}

\item{...}{additional named arguments passed to \code{FUN}.}

\item{match_type}{one of "\code{all}", "\code{matmult}", or "\code{none}".
When both \code{a} and \code{b} are matrices,
"\code{all}" (the default) indicates that
rowtypes of \code{a} must match rowtypes of \code{b} and
coltypes of \code{a} must match coltypes of \code{b}.
If "\code{matmult}",
coltypes of \code{a} must match rowtypes of \code{b}.
If "\code{none}",
neither coltypes nor rowtypes are checked.}

\item{rowcoltypes}{tells whether to apply row and column types from \code{a} and \code{b}
to the output. 
The default (\code{TRUE}) means that row and column types are applied to the output.
If \code{FALSE}, row and column types are \emph{not} applied to the output.}

\item{.organize}{a boolean that tells whether or not to automatically 
complete \code{a} and \code{b} relative to each other and
sort the rows and columns of the completed matrices.
Normally, this should be \code{TRUE} (the default).}
}
\value{
the result of applying \code{FUN} "byname" to \code{a} and \code{b}.
}
\description{
If either \code{a} or \code{b} is missing or \code{NULL}, 
\code{0} is passed to \code{FUN} in its place.
}
\examples{
library(magrittr)
productnames <- c("p1", "p2")
industrynames <- c("i1", "i2")
U <- matrix(1:4, ncol = 2, dimnames = list(productnames, industrynames)) \%>\%
  setrowtype("Products") \%>\% setcoltype("Industries")
Y <- matrix(1:4, ncol = 2, dimnames = list(rev(productnames), rev(industrynames))) \%>\%
  setrowtype("Products") \%>\% setcoltype("Industries")
sum_byname(U, Y)
binaryapply_byname(`+`, U, Y)
}
